import { Configuration, EventTypeImportOpenApiIn, EventTypeImportOpenApiOut, EventTypeIn, EventTypeOut, EventTypePatch, EventTypeUpdate, ListResponseEventTypeOut, Ordering } from "../openapi";
import { PostOptions } from "../util";
export interface EventTypeListOptions {
    limit?: number;
    iterator?: string | null;
    order?: Ordering;
    includeArchived?: boolean;
    withContent?: boolean;
}
export declare class EventType {
    private readonly api;
    constructor(config: Configuration);
    list(options?: EventTypeListOptions): Promise<ListResponseEventTypeOut>;
    create(eventTypeIn: EventTypeIn, options?: PostOptions): Promise<EventTypeOut>;
    importOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, options?: PostOptions): Promise<EventTypeImportOpenApiOut>;
    get(eventTypeName: string): Promise<EventTypeOut>;
    update(eventTypeName: string, eventTypeUpdate: EventTypeUpdate): Promise<EventTypeOut>;
    delete(eventTypeName: string): Promise<void>;
    patch(eventTypeName: string, eventTypePatch: EventTypePatch): Promise<EventTypeOut>;
}
